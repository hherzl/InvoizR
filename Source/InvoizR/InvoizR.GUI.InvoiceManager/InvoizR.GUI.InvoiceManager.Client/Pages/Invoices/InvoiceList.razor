@page "/invoice"

@using InvoizR.Clients.Contracts
@using InvoizR.Clients.DataContracts
@using InvoizR.Clients.DataContracts.Common

@inject IInvoizRClient invoizRClient

<h3>Invoices</h3>

<br />

<MudExpansionPanels>
    <MudExpansionPanel Icon="@Icons.Material.Filled.Filter" Title="Filter" Expanded="Loading">
        @if (ViewBag != null)
        {
            <MudSelect T="ListItem<short?>" Label="POS" @bind-Value="SelectedPos">
                <MudSelectItem T="ListItem<short?>" Value="new()"></MudSelectItem>
                @foreach (var item in ViewBag.BranchPos)
                {
                    <MudSelectItem T="ListItem<short?>" Value="@item">@item.Name</MudSelectItem>
                }
            </MudSelect>

            <br />

            <MudSelect T="ListItem<short?>" Label="Processing status" @bind-Value="SelectedProcessingStatus">
                <MudSelectItem T="ListItem<short?>" Value="new()"></MudSelectItem>
                @foreach (var item in ViewBag.ProcessingStatuses)
                {
                    <MudSelectItem T="ListItem<short?>" Value="@item">@item.Name</MudSelectItem>
                }
            </MudSelect>

            <br />

            <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="Load_Click">Load</MudButton>
            <MudButton Color="Color.Secondary" Variant="Variant.Outlined" @onclick="Clear_Click">Clear</MudButton>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

<MudText Typo="Typo.caption">Total of rows: @(Response?.ItemsCount).</MudText>

<MudProgressCircular Color="Color.Primary" Indeterminate="@Loading" />

<MudTable Items="@Response?.Model">
    <HeaderContent>
        <MudTh>Branch/POS</MudTh>
        <MudTh>Customer</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Number</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Total</MudTh>
        <MudTh>Processing status</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Branch/POS">@context.Branch/@context.Pos</MudTd>
        <MudTd DataLabel="Customer">@context.CustomerName</MudTd>
        <MudTd DataLabel="Invoice type">@context.InvoiceType</MudTd>
        <MudTd DataLabel="Invoice number">@context.InvoiceNumber</MudTd>
        <MudTd DataLabel="Invoice date">@context.InvoiceDate</MudTd>
        <MudTd DataLabel="Total">@context.InvoiceTotal.ToCurrency()</MudTd>
        <MudTd DataLabel="Sync status">
            @{
                var buttonStyle = @context.ProcessingStatusId.GetButtonStyle();
                <MudButton Color="@buttonStyle.Item1" Variant="@buttonStyle.Item2" DropShadow="false">
                    <MudText Typo="Typo.caption">@context.ProcessingStatus</MudText>
                </MudButton>
            }
        </MudTd>
        <MudTd DataLabel="Details">
            <a href="@($"/invoice/{@context.Id}")">
                <MudIcon Icon="@Icons.Material.Filled.Details" Title="Details" />
            </a>
        </MudTd>
    </RowTemplate>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
        <MudPagination SelectedChanged="PageChanged" Count="(int)Response?.PageCount" Class="pa-4" />
    </PagerContent>
</MudTable>

@code {
    bool Loading { get; set; }
    GetInvoicesViewBagResponse ViewBag { get; set; }

    ListItem<int> SelectedPageSize { get; set; }
    ListItem<short?> SelectedPos { get; set; }
    ListItem<short?> SelectedProcessingStatus { get; set; }
    GetInvoicesQuery Req { get; set; }
    PagedResponse<InvoiceItemModel> Response { get; set; }

    protected async Task LoadAsync()
    {
        Loading = true;

        Req.PageSize = SelectedPageSize.Id;
        Req.PosId = SelectedPos?.Id;
        Req.ProcessingStatusId = SelectedProcessingStatus?.Id;

        Response = await invoizRClient.GetInvoicesAsync(Req);

        Loading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        ViewBag = await invoizRClient.GetInvoicesViewBagAsync();

        SelectedPageSize = ViewBag.PageSizes.First();
        SelectedPos = new() { Name = "Seleccionar" };
        SelectedProcessingStatus = new() { Name = "Seleccionar" };

        Req = new();

        await LoadAsync();
    }

    private async Task Load_Click()
    {
        await LoadAsync();
    }

    private async Task Clear_Click()
    {
        Req.PageSize = 25;
        Req.PageNumber = 1;

        SelectedPageSize = ViewBag.PageSizes.First();
        SelectedPos.Id = null;
        SelectedProcessingStatus.Id = null;

        await LoadAsync();
    }

    private async Task PageChanged(int i)
    {
        Req.PageNumber = i;
        await LoadAsync();
    }
}
